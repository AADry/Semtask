/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package semtask;

import java.awt.Container;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;

/**
 *
 * @author Admin
 */
public class SaveImageFrame extends MainFrame{
    /**
     * Creates new form SaveImageFrame
     */
   /* List<IShape> container12 = new ArrayList<>();
    public SaveImageFrame() {
        initComponents();
    }
    @Override
    public void paint(Graphics g){
        super.paint(g);
        g.drawLine(500,100,500,1000);
        g.drawLine(100, 400, 1000, 400);
        for(int i = 0;i < container12.size();i++){
            IShape t = container12.get(i);
            if(t.getClass() == Segment.class){
                Segment ts = new Segment();
                ts = (Segment) t;
                g.drawLine((int)ts.start.x[0], (int)ts.start.x[1], (int)ts.finish.x[0], (int)ts.finish.x[1]);
            }
            if(t.getClass() == Circle.class){
                Circle tc = new Circle();
                tc = (Circle) t;
                g.drawOval((int)(tc.p.x[0]-(tc.r/2)) , (int)(tc.p.x[1]-(tc.r/2)) , (int)tc.r , (int)tc.r);
            }
            if(t.getClass() == Polyline.class){
                Polyline tp = new Polyline();
                tp = (Polyline) t;
                for(int b=0;b<tp.n-1; b++){
                g.drawLine((int)tp.p[b].x[0] , (int)tp.p[b].x[1] , (int)tp.p[b+1].x[0] , (int)tp.p[b+1].x[1]);
                }
                
            }
            if(t.getClass() == Rectangle.class){
                Rectangle tr = new Rectangle();
                tr = (Rectangle) t;
                g.drawLine((int)tr.p[0].x[0], (int)tr.p[0].x[1], (int)tr.p[1].x[0], (int)tr.p[1].x[1]);
                g.drawLine((int)tr.p[1].x[0], (int)tr.p[1].x[1], (int)tr.p[2].x[0], (int)tr.p[2].x[1]);
                g.drawLine((int)tr.p[2].x[0], (int)tr.p[2].x[1], (int)tr.p[3].x[0], (int)tr.p[3].x[1]);
                g.drawLine((int)tr.p[3].x[0], (int)tr.p[3].x[1], (int)tr.p[0].x[0], (int)tr.p[0].x[1]);
            }
            if(t.getClass() == QGon.class){
                QGon tr = new QGon();
                tr = (QGon) t;
                g.drawLine((int)tr.p[0].x[0], (int)tr.p[0].x[1], (int)tr.p[1].x[0], (int)tr.p[1].x[1]);
                g.drawLine((int)tr.p[1].x[0], (int)tr.p[1].x[1], (int)tr.p[2].x[0], (int)tr.p[2].x[1]);
                g.drawLine((int)tr.p[2].x[0], (int)tr.p[2].x[1], (int)tr.p[3].x[0], (int)tr.p[3].x[1]);
                g.drawLine((int)tr.p[3].x[0], (int)tr.p[3].x[1], (int)tr.p[0].x[0], (int)tr.p[0].x[1]);
            }
            if(t.getClass() == TGon.class){
                TGon tr = new TGon();
                tr = (TGon) t;
                g.drawLine((int)tr.p[0].x[0], (int)tr.p[0].x[1], (int)tr.p[1].x[0], (int)tr.p[1].x[1]);
                g.drawLine((int)tr.p[1].x[0], (int)tr.p[1].x[1], (int)tr.p[2].x[0], (int)tr.p[2].x[1]);
                g.drawLine((int)tr.p[2].x[0], (int)tr.p[2].x[1], (int)tr.p[3].x[0], (int)tr.p[3].x[1]);
                g.drawLine((int)tr.p[3].x[0], (int)tr.p[3].x[1], (int)tr.p[0].x[0], (int)tr.p[0].x[1]);
            }
            if(t.getClass() == NGon.class){
                NGon tn = new NGon();
                tn = (NGon) t;
                for(int j = 0; j< tn.n-1;j++ ){
                g.drawLine((int)tn.p[j].x[0] , (int)tn.p[j].x[1] , (int)tn.p[j+1].x[0] , (int)tn.p[j+1].x[1]);
                }
                g.drawLine((int)tn.p[tn.n-1].x[0] , (int)tn.p[tn.n-1].x[1] , (int)tn.p[0].x[0] , (int)tn.p[0].x[1]);
            }
            if(t.getClass() == Trapeze.class){
                QGon tr = new QGon();
                tr = (QGon) t;
                g.drawLine((int)tr.p[0].x[0], (int)tr.p[0].x[1], (int)tr.p[1].x[0], (int)tr.p[1].x[1]);
                g.drawLine((int)tr.p[1].x[0], (int)tr.p[1].x[1], (int)tr.p[2].x[0], (int)tr.p[2].x[1]);
                g.drawLine((int)tr.p[2].x[0], (int)tr.p[2].x[1], (int)tr.p[3].x[0], (int)tr.p[3].x[1]);
                g.drawLine((int)tr.p[3].x[0], (int)tr.p[3].x[1], (int)tr.p[0].x[0], (int)tr.p[0].x[1]);
            }
            
         }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jFileChooser1.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 1404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
           /* File file;
            file = jFileChooser1.getSelectedFile();
            String path = file.getPath();
            jFileChooser1.setVisible(false);
            
             BufferedImage bi = new BufferedImage(mainframe.getWidth(),mainframe.getHeight(),BufferedImage.TYPE_INT_RGB);
             Graphics g = bi.createGraphics();
             this.printAll(g);
             
try {
            ImageIO.write(bi, "png", file);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
      

        this.dispose();*/
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaveImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaveImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaveImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaveImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SaveImageFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables

}
